#!/bin/bash
##===========================================================================
#%
#% USAGE: kbuild [options] [config file]
#%
#% The kbuild script is a convenient wrapper running the kbuild.sh script
#% inside a Docker container.
#%
#% If no configuration file is passed as argument is given, it looks for a 
#% file named kbuild.cfg in curernt directory.
#%
#% OPTIONS:
#%   -h             Show this help
#%   -v             Show verbose output
#%   -c CMD         Run custom command in Docker container
#%   -i IMAGE       Use custom command in Docker container image
#%   -s             Run interactive bash shell in Docker container
#%
##===========================================================================

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

[[ ! -x "$(which docker)" ]] && echo "ERROR: cannot find docker binay in path - please verify Docker installation" && exit 1

CMD=kbuild.sh

while getopts ":hvsc:" opt; do
    case $opt in
        h)
            head -n 200 "$SCRIPT_DIR/$(basename $0)" | sed -n -e 's/^#%//gp;'
            exit
            ;;
        v)
            export VERBOSE_FLAG="-v"
            ;;
        c)
            CMD="${OPTARG}"
            ;;
        s)
            CMD=""
            ;;
 
        \?)
            echo "invalid option: -$OPTARG"
            ;;
    esac
done
shift "$((OPTIND - 1))"

export SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export CONTAINER_IMAGE=${CONTAINER_IMAGE:-ntc-registry.githost.io/nextthingco/kbuild:unstable}

export CI_JOB_ID=${RANDOM}

# CONFIG_FILE either spacified as environment variable or as first command line parameter
CONFIG_FILE=${CONFIG_FILE:-$1}
CONFIG_FILE=${CONFIG_FILE:-kbuild.cfg}
[[ ! -f "$CONFIG_FILE" ]] && echo "ERROR: cannot find configuration file '$CONFIG_FILE'" && exit 1
TMP_CFG=$(mktemp)
cp "$CONFIG_FILE" "$TMP_CFG"
CFG_FILE_FLAG="-v $(cd "$(dirname "$TMP_CFG")"; pwd)/$(basename "$TMP_CFG"):/work/kbuild.cfg"

#docker pull $CONTAINER_IMAGE
docker run --rm -it \
           -e PRIVATE_DEPLOY_KEY="${PRIVATE_DEPLOY_KEY}"  \
           -e CI_JOB_ID="${CI_JOB_ID}" \
           -v $SCRIPT_DIR:/opt/kbuild \
           -v $PWD:/work -w /work \
           $CFG_FILE_FLAG \
           $VERBOSE_FLAG \
           $CONTAINER_IMAGE bash -c "$CMD"

rm $TMP_CFG
