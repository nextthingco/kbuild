#!/bin/bash
##===========================================================================
#%
#% USAGE: kbuild [OPTIONS] COMMAND
#%
#% The kbuild script is a convenient wrapper running the kbuild.sh script
#% inside a Docker container.
#%
#% If no configuration file is specified, it looks for a file named
#% kbuild.cfg in current directory.
#%
#%
#% COMMANDS:
#%   all                  Builds everything specified in the kbuild.cfg
#%   linux                Only build Linux Debian packages
#%   rtl8723              Only build RTL8723 Wifi drivers packages
#%   chip-mali            Only build Mali GPU drivers for C.H.I.P 
#%
#%   linux-nconfig        Allows to modify the Linux configuration
#%   linux-savedefconfig  Save Linux defconfig
#%
#%   shell <CMD>      Run interactive bash shell in Docker container
#%   update-image     Tries to pull the lates version of the Docker image
#%
#%
#% OPTIONS:
#%   -h               Show this help
#%   -v               Show verbose output
#%   -i IMAGE         Use custom command in Docker container image
#%
##===========================================================================

export SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

export LOCAL_BUILDDIR=src # must be relative path
export DOCKER_VOLUME=kbuild_local_builddir
export USE_DOCKER_VOLUME="-v $DOCKER_VOLUME:/work/$LOCAL_BUILDDIR"
uname="$(uname -s)"
case "${uname}" in
    Linux*)
		mkdir -p "${LOCAL_BUILDDIR}"
		echo "Running natively on Linux, good!"
		export USE_DOCKER_VOLUME=""
		;;
    Darwin*) ;;
    CYGWIN*) ;;
    MINGW*) ;;
    *)
		echo "ERROR: Building on $uname is currently not supported - sorry!"
		exit 1
		;;
esac

[[ ! -x "$(which docker)" ]] && \
    echo "ERROR: cannot find docker binay in path - please verify Docker installation" && 
    exit 1

function help() {
    head -n 200 "$SCRIPT_DIR/$(basename $0)" | sed -n -e 's/^#%//gp;'
    exit
}

while getopts ":hvi:" opt; do
    case $opt in
        h)
            help
            ;;
        v)
            export VERBOSE_FLAG="-v"
            ;;
        i)
            CONTAINER_IMAGE="${OPTARG}"
            ;;
 
        \?)
            echo "invalid option: -$OPTARG"
            exit 1
            ;;
    esac
done
shift "$((OPTIND - 1))"

export CONTAINER_IMAGE="${CONTAINER_IMAGE:-ntc-registry.githost.io/nextthingco/kbuild:unstable}"

command="$1"
case "$command" in
    init)
        CMDLINE_ARGS="$command $2"
        ;;

    linux-nconfig)
        ### do something special here!
        CMDLINE_ARGS="$command"
        ;;

    shell)
        CMD="${@}"
        CMD="${CMD#$command}"
        CMD="${CMD# }"
        CMD=${CMD:-"/bin/bash --login"}
        ;;

    update-image)
        docker pull $CONTAINER_IMAGE
        exit $?
        ;;

    "")
        help
        ;;

    *)
        CMDLINE_ARGS="$command"
        ;;
esac

export CMD="${CMD:-kbuild.sh $VERBOSE_FLAG $CMDLINE_ARGS}"

export CI_JOB_ID=${RANDOM}

#docker pull $CONTAINER_IMAGE
[[ ! -z "${DOCKER_VOLME}" ]] && ( docker volume inspect "${DOCKER_VOLUME}" 2>/dev/null >/dev/null || docker volume create --name "${DOCKER_VOLUME}" )
docker run --rm -it \
           -v /etc/passwd:/etc/passwd:ro \
           -v /etc/group:/etc/group:ro \
           -e PRIVATE_DEPLOY_KEY="${PRIVATE_DEPLOY_KEY}"  \
           -e CI_JOB_ID="${CI_JOB_ID}" \
           -v $SCRIPT_DIR:/opt/kbuild \
           -v $PWD:/work -w /work \
           -e LOCAL_BUILDDIR=/work/$LOCAL_BUILDDIR \
           -u $(id  -u):$(id -g) \
           $USE_DOCKER_VOLUME \
           $CONTAINER_IMAGE $CMD
